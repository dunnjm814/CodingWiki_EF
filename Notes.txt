Remove Migration and Update existing table

modify type of column in Book model, add migration to apply data type changes to db. But we want to modify precision decimal
no tags/attributes available for model precision specifications in EF
Needs to override OnModelCreating in ApplicationDBCOntext to modify column precisions, etc
if we have not applied the changePriceColumnToDecimal migration to Db yet we can simply run  'Remove-Migration' 
if we have applied this change, do not run this or issues will come up, just create a new migration modifying what you need. 
Running remove-migration will also roll back the snapshot file. 
now that we have our model-> db overrides set in context we can re-run add-migration with the same name and update the db

Click into CSProj file for data access layer to remove nullable properties

When we ran a migration for Genres table, since we had removed Nullability from the CsProject, the two columns in book that are
string data type where flagged for alteration in db due to previously allowing null. 


Rename Column
in .net6+ this is easy, rename column in model, add-migration and update db. this applies RenameColumn method.
prior to .net5, a column rename would drop the column and apply the new one. this is problematic if we have live data.
to not drop data in the migraiton run `migrationBuilder.SQL("UPDATE dbo.<Table> SET <ColumnToChange>=<NewColumnName>")

Best Practices when to add Migrations:
1.Add new class / table
2.Add new property / column to the table
3.Modify existing property / column in a table
4.Delete existing property / column in table
5.Delete a class / table in database
Always make small changes, keep migrations as small as possible. Validate, validate validate!
Never Remove a migration from the migration folder unless you KNOW WHAT YOUR DOING. 
When in doubt, just make a new migration with your desired changes.


to remove a table from DB, remove DbSet<TableName> in ApplicationDbContext. 


Rollback to Old Migrations:
Copy migration that you want to rollback to from console.
update-database with migration name (not the date, just the name like AddBookToDB to undo all migrations we ran after)
without entity frameworks we have to remember all the database changes 
Do not do this in production since tables will likely be dropped. 


Reverting back and Deleting migration
if two migrations cancel each other out (remove then re add same table for example) then you can safely delete the migrations
remove-migration command will also remove migrations


Commands:
Drop-database - will ask you to confirm for obvious reasons
Update-database - create database and apply all migrations 


Seed Data with migrations
in ApplicationDb context in OnModelCreating method we can add seed data by creating an Entity<t> and using the HasData() method
either add your models directly into the HasData() method or pass an array of your model into the method
to apply the seed data run a migration!

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Data Annotations

We can Apply Table and Column name changes with data annotations
[Table("NewName")] [Column("NewColumnName")]

Explicitly make a column required with [Required] attribute
Explicitly define Primary key with [Key] attribute
[MaxLength(x)] define the maximum size of a string
[NotMapped] Property that is doing logic, but property doesnt need to be in database (no column added)

EF Core Powertools extension to create database diagrams 


Foreign Key
Different types of relationships
1-1: in book example, only one book can have a Detail, one BookDetail can only represent one book
add reference to related models within both models
on appropriate table add column for Id that represents the Id Name of the related table
Add annotation for [ForeignKey("<Model>")]
when Migration is added, in the add foreign key column a delete action called referentialAction.Cascade is added
this means that if parent record (book) is deleted, child record will also be deleted.
For 1 to 1 relations with Books -> BookDetails this makes sense, but what about authors or publishers? We dont want to delete these records when a book is deleted.
Instead of cascade ReferentialAction, we can choose NoAction (or a variety of other actions (SetNull, SetDefault, etc))

1-Many:
only need to add relationship to Child model.
ForeignKey added to Many portion of relationship, and Parent will have a List<t> of all the child relationships

Many-Many:
in our example, one author can have many books, and one book can have may authors
With .net 5+ EF core has feature that will automatically create mapping table
adding List<Author> to Books Model, and List<Book> to Authors Model, EF core will automatically create an association between these two entities
when we check out AddManyToManyRelation_SkipMappingTable migraiton we can see that this creates the AuthorBook table with all appropriate constraints automatically
If we want to add an additional column to this table we will need to Manually add this mapping table.
Definitions must be explicitly defined
Rather than explicitly setting a table Id for the mapping table, we can use FluentAPI to create a composite key of the two foreign keys in this table
in ApplicationDbContext we can create a composite key with Entity<T>().HasKey() method
When we apply this migration, the automaticly generated table was dropped because we created it manually 