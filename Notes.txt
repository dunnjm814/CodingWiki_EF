Remove Migration and Update existing table

modify type of column in Book model, add migration to apply data type changes to db. But we want to modify precision decimal
no tags/attributes available for model precision specifications in EF
Needs to override OnModelCreating in ApplicationDBCOntext to modify column precisions, etc
if we have not applied the changePriceColumnToDecimal migration to Db yet we can simply run  'Remove-Migration' 
if we have applied this change, do not run this or issues will come up, just create a new migration modifying what you need. 
Running remove-migration will also roll back the snapshot file. 
now that we have our model-> db overrides set in context we can re-run add-migration with the same name and update the db

Click into CSProj file for data access layer to remove nullable properties

When we ran a migration for Genres table, since we had removed Nullability from the CsProject, the two columns in book that are
string data type where flagged for alteration in db due to previously allowing null. 


Rename Column
in .net6+ this is easy, rename column in model, add-migration and update db. this applies RenameColumn method.
prior to .net5, a column rename would drop the column and apply the new one. this is problematic if we have live data.
to not drop data in the migraiton run `migrationBuilder.SQL("UPDATE dbo.<Table> SET <ColumnToChange>=<NewColumnName>")

Best Practices when to add Migrations:
1.Add new class / table
2.Add new property / column to the table
3.Modify existing property / column in a table
4.Delete existing property / column in table
5.Delete a class / table in database
Always make small changes, keep migrations as small as possible. Validate, validate validate!
Never Remove a migration from the migration folder unless you KNOW WHAT YOUR DOING. 
When in doubt, just make a new migration with your desired changes.


to remove a table from DB, remove DbSet<TableName> in ApplicationDbContext. 


Rollback to Old Migrations:
Copy migration that you want to rollback to from console.
update-database with migration name (not the date, just the name like AddBookToDB to undo all migrations we ran after)
without entity frameworks we have to remember all the database changes 
Do not do this in production since tables will likely be dropped. 


Reverting back and Deleting migration
if two migrations cancel each other out (remove then re add same table for example) then you can safely delete the migrations
remove-migration command will also remove migrations


Commands:
Drop-database - will ask you to confirm for obvious reasons
Update-database - create database and apply all migrations 


Seed Data with migrations
in ApplicationDb context in OnModelCreating method we can add seed data by creating an Entity<t> and using the HasData() method
either add your models directly into the HasData() method or pass an array of your model into the method
to apply the seed data run a migration!

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Data Annotations

We can Apply Table and Column name changes with data annotations
[Table("NewName")] [Column("NewColumnName")]

Explicitly make a column required with [Required] attribute
Explicitly define Primary key with [Key] attribute
[MaxLength(x)] define the maximum size of a string
[NotMapped] Property that is doing logic, but property doesnt need to be in database (no column added)

EF Core Powertools extension to create database diagrams 


Foreign Key
Different types of relationships
1-1: in book example, only one book can have a Detail, one BookDetail can only represent one book
add reference to related models within both models
on appropriate table add column for Id that represents the Id Name of the related table
Add annotation for [ForeignKey("<Model>")]
when Migration is added, in the add foreign key column a delete action called referentialAction.Cascade is added
this means that if parent record (book) is deleted, child record will also be deleted.
For 1 to 1 relations with Books -> BookDetails this makes sense, but what about authors or publishers? We dont want to delete these records when a book is deleted.
Instead of cascade ReferentialAction, we can choose NoAction (or a variety of other actions (SetNull, SetDefault, etc))

1-Many:
only need to add relationship to Child model.
ForeignKey added to Many portion of relationship, and Parent will have a List<t> of all the child relationships

Many-Many:
in our example, one author can have many books, and one book can have may authors
With .net 5+ EF core has feature that will automatically create mapping table
adding List<Author> to Books Model, and List<Book> to Authors Model, EF core will automatically create an association between these two entities
when we check out AddManyToManyRelation_SkipMappingTable migraiton we can see that this creates the AuthorBook table with all appropriate constraints automatically
If we want to add an additional column to this table we will need to Manually add this mapping table.
Definitions must be explicitly defined
Rather than explicitly setting a table Id for the mapping table, we can use FluentAPI to create a composite key of the two foreign keys in this table
in ApplicationDbContext we can create a composite key with Entity<T>().HasKey() method
When we apply this migration, the automaticly generated table was dropped because we created it manually 


Fluent API:

Advanced way of specifying model config that covers everything that data annotations can do plus more
Another way of configuring Domain Classes
Configure tables and relations in a configuration folder with fluent api
order of fluent operations: Table info > Column info > Primary Key > Validations > Relations
apply configuration in ApplicationDbContext


Database Helper Methods:
working from Console project
import using statements for DataAccess and Model
using ApplicationDbContext we can call context.Database.EnsureCreated() to ensure our database is created and has tables.
Nothing is done to ensure the database schema is compatible with framework model. 
If database exists but does not have any tables, entity model is used to create the database schema
FirstOrDefault() returns null or default if no object found, First() will just throw exception
when passing variables into linq conditions, parameters are automatically created. Note the parameter in where clause in the following log:

info: 11/11/2023 15:09:04.699 RelationalEventId.CommandExecuted[20101] (Microsoft.EntityFrameworkCore.Database.Command)
      Executed DbCommand (46ms) [Parameters=[@__id_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT TOP(1) [b].[BookId], [b].[ISBN], [b].[Price], [b].[Publisher_Id], [b].[Title]
      FROM [Books] AS [b]
      WHERE [b].[Publisher_Id] = @__id_0
Book 5 - 656123

Find() method can be used to find a record by Primary Key
-Not a linq method, method on db set itself. 

Single() or SingleOrDefault()
Returns only one value, but we can filter on any column.
Expects ONLY one element, if the return has more than one record an exception will be thrown.
Single will throw exception if no record found, SingleOrDefault will return default or null if no record found. 

Contains, Like, Aggregation
Filtering Collections of results with Where(x => x.contains(y)) yeilds the following where clause in generated sql
WHERE [b].[ISBN] LIKE N'%12%'
What if we wanted to control where the wildcard is placed?
we can use EF.Functions to control our sql statements in .net.
using EF.Functions.Like() generated the following where clause
WHERE [b].[ISBN] LIKE N'12%'

we can also use our aggregate methods in tandem with Where Clauses like Max(), Min(), Count()

Sorting Data:
OrderBy(), OrderByDescending()
When we chain sorting conditions, the first in chain will be secondary to the sort.
In order to chain the above two with the First OrderBy() first we can use ThenByDescending() to ensure the second sort actually happens secondly

Pagination:
Skip() and Take() methods

Update in EF core
Find your entity with any of the previously discussed data retreival methods,
update the property with whatever input you want (if in a list, use foreach)
call SaveChanges() on open context

Delete in EF core
Remove() method. Remember to SaveChanges()!

Async Methods
await context.SaveChangesAsync(). Method must be defined as Async.
We also have ToListAsync(), no Skip or take Async, but we can call ToListAsync after skips and takes
AddAsync() to add rows.
When In doubt, use asynchronous methods. Same performance as non async

MVC Setup for EF Core
Appsettings: add connection string, app settings exist on server and wont be hard coded into the program
Program.cs: register db context and pass connection string to builder.configuration.
ApplicationDbContext: no longer using onConfiguring
    Connection string is passed to base class within the constructor
    For logging in output window: add the following to Logging in appsettings.json
    "Microsoft.EntityFrameworkCore.Database.Command": "Information"


Projections in EF core
A way of converting an entity into a c# class with a subset of those properties
Efficient because you are only selecting needed properties vs all entity properties
.Select() and create new object (view model for Book in our examples)

IQueryable
Interface inherits from IEnumerable.
Difference between the two is how filtering is applied.
With IEnumerable the query retreives data, then applies filtering in memory
IQueryable only returns filtered records in data set

Lazy Loading Related Data:
Install Microsoft.EntityFrameworkCore.Proxies
Three ways of loading
Explicit: Related data is loaded at a later time, in separate queries. Utilize reference and collection methods
Eager: Related data is loaded in initial query itself. Singly query. Include / theninclude
Lazy: Related data is loaded when navigation property is accessed. Virtual navigation properties. 

Use Watch to track changes 
EF core starts tracking entities the moment you retrieve the entity
if an entity is tracked, any changes detected in entity will be persisted to the database during SaveChanges()
by default, Queries that return entity types are tracked. 
Tracking requires extra resources
use AsNoTracking() to override this default tracking.
    --Useful for read only scenario, quicker to execute because resources are freed from tracking. 
    -- in program.cs we can also set DbContext options for tracking with
        -- options.UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking)
        -- Sets default 

Views and Stored Procedures
create empty migration within DataAccessLayer. 
Similar to how we seed data, we can use.SQL on migrationBuilder to create our views and Stored Procedures from EF core.
use .ToView() method to map entity to a dbset within context. This would be Read only
linq methods can be used on views similar to any other ef entity. 

Executing Raw sql:
FromSQLRaw()
FromSQLInterpolated()
Both have async versions
Must be called from dbSet. _db.Books.FromSQLInterpolated($"Select * from dbo.books where bookid={id}").ToList();
limitation: cannot specify columns. since we are working with dbSet we must always use select * ....

Stored Procedure:
Use FromSQLInterpolated() passing stored procedure execution strings, passing in any parameters required.

